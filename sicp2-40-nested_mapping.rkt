#lang scheme
(display "2.40 - unique pairs") (newline)
; for given n<m,  get seq of (m, m-1, ..., n+1, n) i.e [n, m)
(define (enumerate-interval n m) 
    (define (iter a b) ; a > b
        (if (< a b) '()
            (cons a (iter (sub1 a) b))
        )
    ) 
    (cond ((= n m) '())
          ((< n m)  (enumerate-interval m n))
          (else (iter n m))
    )
)
(enumerate-interval 1 8) (newline)
(enumerate-interval 1 8) (newline)
(enumerate-interval 8 8) (newline)


; (define (enumerate-interval n m) (if (= n m) '()))

(define (accumulate op initial seq)
   (if (null? seq) initial
      (op (car seq) (accumulate op initial (cdr seq)))   
   )
)
(define (unique-pair1 n)
    (let ((initial (enumerate-interval n 1)))
        (define (iter result seq)
            (if (null? (cdr seq)) result
                (iter (append result (map (lambda (x) (cons (car seq) x)) seq)) 
                      (cdr seq))
            )
        )
        (iter '() initial)
    )
)
(unique-pair1 7)

;for given n, get sequence of pairs, in each pair, 1 <= i < j <= n
(define (unique-pair n)
    (let ((initial (enumerate-interval n 1)))
        (define (iter result seq)
            (if (null? (cdr seq)) result
                (iter (append result (map (lambda (x) (cons (car seq) x)) seq)) 
                      (cdr seq))
            )
        )
        (iter '() initial)
    )
)
(unique-pair 7)

(define (flatmap proc seq) (accumulate append '() (map proc seq)))

(define (filter predicate? items)
    (cond ((null? items) '())
        ((predicate? (car items)) (cons (car items) (filter predicate? (cdr items))))
        (else (filter predicate? (cdr items)))
    )
)
(define (remove item seq) (filter (lambda (x) (not (= x item))) seq))

(remove 3 (enumerate-interval 1 5))
(display "2 - permutation") (newline)
(define (permutation seq)
    (if (null? seq) '()
        (flatmap (lambda (x) 
                    (map (lambda (y) (cons x y)) 
                         (permutation (remove x seq))))
                  seq)
    )
)
(permutation (enumerate-interval 1 5))
(define (unique-pair1))