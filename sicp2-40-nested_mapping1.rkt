#lang scheme
(display "2.40 - unique pairs") (newline)
; for given n<m,  get seq of (m, m-1, ..., n+1, n) i.e [n, m)
(define (enumerate-interval n m) 
    (define (iter a b) ; a < b
        (if (> a b) '()
            (cons a (iter (add1 a) b))
        )
    ) 
    (cond ((= n m) '())
          ((> n m)  (enumerate-interval m n))
          (else (iter n m))
    )
)
(enumerate-interval 1 8) (newline)
(enumerate-interval 1 8) (newline)
(enumerate-interval 8 8) (newline)

; (ei 2 5) get '(2 3 4 5)
; (ei 5 2) get '(5 4 3 2)
(define (enumerate-interval1 n m) 
    (define (iter_asc a b) ; a < b
        (if (> a b) '()
            (cons a (iter_asc (add1 a) b))
        )
    ) 
    (define (iter_desc a b) ; a > b
        (if (< a b) '()
            (cons a (iter_desc (sub1 a) b))
        )
    ) 
    (cond ((= n m) '())
          ((> n m)  (iter_desc n m))
          (else (iter_asc n m))
    )
)
(enumerate-interval1 2 5)
(enumerate-interval1 5 2)
(enumerate-interval1 5 5)


(define (accumulate op initial seq)
   (if (null? seq) initial
      (op (car seq) (accumulate op initial (cdr seq)))   
   )
)
;(define (flatmap proc seq) (accumulate proc '() seq))

(define (flatmap proc seq) (accumulate append '() (map proc seq)))

(display "2.40 - unique pairs") (newline)
(define (unique-pair n)
   (flatmap (lambda (x) 
                    (map (lambda (y) (cons x y))
                         (enumerate-interval 1 x)  
                    )
            )
            (enumerate-interval 2 n)
   )
)
(unique-pair 7)

(define (filter predicate? items)
    (cond ((null? items) '())
        ((predicate? (car items)) (cons (car items) (filter predicate? (cdr items))))
        (else (filter predicate? (cdr items)))
    )
)
(define (remove item seq) (filter (lambda (x) (not (= x item))) seq))

(define (perm n)
    (if (null? n) (list '()) 
        (flatmap  (lambda (x) 
                            (map (lambda (y) (cons x y))  
                                (perm (remove x n))
                            )) 
                n
        ) 
    )
)
(perm (enumerate-interval 1 4))

(display "2.41 - 3 sum") (newline)
(display "2.41 - 2 sum") (newline)
(define (half n)
    (if (even? n) (/ n 2)
        (/ (sub1 n) 2) 
    )
)

(half  4)
(half  5)
(half -5)

(define (2sum 2s n)
    (let ((lo (half 2s)) (hi (add1 (half 2s))))
        (filter (lambda (z) (= 2s (accumulate + 0 z)))
            (flatmap (lambda (x) 
                            (map (lambda (y) (list x y)) (enumerate-interval hi n))) 
                (enumerate-interval 1 lo)
            )
        )
    )
)

(define (ascending-pair 2s a b)
    (let ((lo (half 2s)) (hi (add1 (half 2s))))
        (flatmap (lambda (x)
                        (map (lambda (y) (list x y)) (enumerate-interval hi b))) 
                 (enumerate-interval a lo)
        )
    )
)
(define (2sum-1 2s a b)
    (filter (lambda (z) (= 2s (accumulate + 0 z)))
        (ascending-pair 2s a b)
    )
)

;(2sum 6  5)
;(ascending-pair 8  9)
;(ascending-pair 8  9)
(2sum-1 8 1 9)
(2sum-1 11 1 9)

;(2sum 8  9)
;(2sum 8  9)
;(define (3sum 3s n)
;   (filter (lambda (x) (= 3s (accumulate + 0 x))) 
;           (3sum-list 3s n)
;   )
;)
;(define (3sum-list 3s n)
;    (let ((1h (floor (/ 3s 3))) 
;          (2l (add1 (floor (/ 3s 3))))
;          (2h (floor (/ (* 2 3s) 3)))
;          (3l (add1 (floor (/ (* 2 3s) 3))))) 
;        (flatmap (lambda (x) 
;                        (map (lambda (y) (cons x y)) 
;                             (flatmap (lambda (z) 
;                                              (map (lambda (t) (list z t))
;                                                        (enumerate-interval 3l n))
;                                      )
;                                      (enumerate-interval 2l 2h)
;                             )
;                        )
;                 )
;                (enumerate-interval 1 1h)
;        )
;    )
;)
;(3sum 9 9)

(define (3sum-1 3s b)
    (let ((lo (half 3s)) (hi (add1 (half 3s))))
        (flatmap (lambda (x) 
                        ; (map (lambda (y) (cons x y)) (2sum-1 (- 3s x) (add1 x) b))) 
                        (map (lambda (y) (cons x y)) (ascending-pair (- 3s x) (add1 x) b))) 
                (enumerate-interval 1 lo)
        )
    )
)

(3sum-1 9 6)